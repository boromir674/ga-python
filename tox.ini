[tox]
envlist =
    {py312-, py311-, py310-, py39-, py38-, }{dev, sdist, wheel}{, -linux, -macos, -windows}
    coverage
isolated_build = true
skip_missing_interpreters = false
minversion = 3.14
requires = virtualenv >= 20.12.1

[gh-actions]
python =
    3.8: {py38}{, -path, -sdist, -wheel, -dev}
    3.9: {py39}{, -path, -sdist, -wheel, -dev}
    3.10: {py310}{, -path, -sdist, -wheel, -dev}
    3.11: {py311}{, -path, -sdist, -wheel, -dev}
    3.12: {py312}{, -path, -sdist, -wheel, -dev}

[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos
    windows-latest: windows

[testenv]
description = Testing Environment for {envname}
setenv =
    PYTHONBUFFERED = yes
    TEST_RESULTS_DIR = {toxinidir}{/}test-results
    MYPYPATH = {toxinidir}{/}src{/}stubs
    PY_PACKAGE = minimum_python
    DIST_DIR = dist
    COVERAGE_FILE = {toxworkdir}{/}.coverage.{envname}
    TEST_STATUS_DIR = {envtmpdir}
    PYPY3323BUG = 1
    DEFAULT_REQS_FILE = reqs.txt
extras = test
commands = pytest \
    -ra --cov --cov-report=term-missing \
    --cov-report=html:{envdir}/htmlcov --cov-context=test \
    --cov-report=xml:{toxworkdir}/coverage.{envname}.xml \
    tests


[testenv:pin-deps]
# Pin Deps        : tox -e pin-deps
# With Test Extras: tox -e pin-deps -- -E test
# With Target File: REQS_FILE=reqs-test.txt tox -e pin-deps -- -E test
description = Pin dependencies from poetry lock. Use the REQS_FILE var to override default
basepython = {env:TOXPYTHON:python3}
passenv = REQS_FILE
skip_install = true
deps =
    poetry
    poetry-plugin-export
commands =
    python -m poetry export -f requirements.txt -o {env:REQS_FILE:{env:DEFAULT_REQS_FILE}} {posargs}
    python -c 'print( "\n  Generated requirements file: " + "{env:REQS_FILE:{env:DEFAULT_REQS_FILE}}" );'


## GA Reusable Workflow ##

[testenv:{py312-, py311-, py310-, py39-, py38-, }ga{, -sdist, -wheel}{, -linux, -macos, -windows}]
basepython = {env:TOXPYTHON:python3}
skip_install = true
# EG: minimum_python-0.0.1.tar.gz[test]
# EG: minimum_python-0.0.1.whl[test]
passenv =
    ARTIFACT
    REQS_FILE
setenv =
    {[testenv]setenv}
    _REQS = {env:REQS_FILE:{env:DEFAULT_REQS_FILE}}
commands_pre =
    # check tox env name
    # if it is just 'ga' we are OK
    # else split on '-' and get 2nd element
    # if it is sdist, and ARTIFACT env var ends in '.tar.gz', we are OK
    # if it is wheel, and ARTIFACT env var ends in .whl, we are OK
    python -c 'import os; e = os.environ; n = e["TOX_ENV_NAME"]; a = e["ARTIFACT"]; assert (n == "ga" or (n.split("-")[1] in ["sdist", "wheel"] and (n.split("-")[1] == "sdist" and a.endswith(".tar.gz")) or (n.split("-")[1] == "wheel" and a.endswith(".whl")))), f"TOX_ENV_NAME: \{n\}, ARTIFACT: \{a\}"'

    pip install -r {env:_REQS}
    pip install {env:ARTIFACT}

# Option B Implementation
# Export Prod + Test Deps in CI with `poetry export`
# And then intall those in env, before ARTIFACT

# DEV
[testenv:{py312-, py311-, py310-, py39-, py38-, }dev{, -linux, -macos, -windows}]
description = Installs our source in 'edit' mode, and runs Tests.
usedevelop = true

# SDIST -> expect Distro as *.tar.gz in .tox/dist folder
[testenv:{py312-, py311-, py310-, py39-, py38-, }sdist{, -linux, -macos, -windows}]
description = Builds our sdist, from source, and runs Tests.

# Build -> expect Distro as .whl in $WHEEL_DEST folder, or default .tox/dist/ folder
# Pass WHEEL_DEST as env var to control where the wheel is built
[testenv:build]
description = "Builds our wheel, from sdist (after build it from source), and runs Tests. Note: builds only our wheel."
setenv =
    {[testenv]setenv}
    _BUILD_DEST = {env:BUILD_DEST:{toxworkdir}{/}{env:DIST_DIR}}
deps = build
skip_install = true
changedir = {toxinidir}
; create _BUILD_DEST if not exists
commands_pre = python -c 'import os; d = os.environ["_BUILD_DEST"]; from pathlib import Path; exec("if not Path(d).exists():\n    Path(d).mkdir(parents=True)");'
commands =
    python -m build {toxinidir} --outdir {env:_BUILD_DEST}

# WHEEL -> expect Distro as .whl in $WHEEL_DEST folder, or default .tox/dist/ folder
# Pass WHEEL_DEST as env var to control where the wheel is built
[testenv:{py312-, py311-, py310-, py39-, py38-, }wheel{, -linux, -macos, -windows}]
description = "Builds our wheel, from source, and runs Tests. Note: potentially, builds our wheel's dependencies, too."
setenv =
    {[testenv]setenv}
    _WHEEL_DEST = {env:WHEEL_DEST:{toxworkdir}{/}{env:DIST_DIR}}
skip_install = true
changedir = {toxinidir}
commands_pre = python -c 'import os; d = os.environ["_WHEEL_DEST"]; import shutil; exec("if os.path.exists(d):\n    shutil.rmtree(d)");'
commands =
    # Build Wheel from Source. It may result in building our wheel's dependencies, too!
    pip wheel --wheel-dir {env:_WHEEL_DEST} --cache-dir {envdir} {toxinidir}
    # Install Wheel(s), and Test dependencies
    pip install --exists-action w --force-reinstall \
        "{env:_WHEEL_DEST}{/}{env:PY_PACKAGE}-{env:PKG_VERSION}-py3-none-any.whl[test]"
    {[testenv]commands}

[testenv:coverage]
description = Combine coverage from test environments
passenv = DIFF_AGAINST
setenv = COVERAGE_FILE = {toxworkdir}/.coverage
skip_install = true
deps =
    coverage[toml]>=5.1
    diff_cover>=6
parallel_show_output = true
commands =
    coverage combine
    coverage report --skip-covered --show-missing -i
    coverage xml -o {toxworkdir}/coverage.xml -i
    coverage html -d {toxworkdir}/htmlcov -i

## STATIC TYPE CHECKING
[testenv:type]
description = Type checking with mypy
extras = typing
usedevelop = true
changedir = {toxinidir}
commands = mypy --show-error-codes {posargs:src{/}{env:PY_PACKAGE} tests}

